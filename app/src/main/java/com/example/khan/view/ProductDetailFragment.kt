package com.example.khan.view

import android.graphics.Color
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import com.bumptech.glide.Glide
import com.example.khan.R
import com.example.khan.adapter.FeaturedProductsAdapter
import com.example.khan.adapter.ProductAdapter
import com.example.khan.adapter.ProductsDetailsAdapter
import com.example.khan.databinding.FragmentProductDetailBinding
import com.example.khan.local_db.entity.CartItem
import com.example.khan.model.BaseResponse
import com.example.khan.model.Item
import com.example.khan.viewmodel.MainActivityViewmodel

class ProductDetailFragment : Fragment() {

    // Declare the binding object for this fragment
    private lateinit var binding: FragmentProductDetailBinding

    // Declare the Adapter and binding object
    private lateinit var productDetailsAdapter: ProductsDetailsAdapter

    // Obtain the ViewModel from the parent activity
    private val viewModel: MainActivityViewmodel by activityViewModels()


    // Inflate the fragment layout and initialize necessary components
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        binding = FragmentProductDetailBinding.inflate(layoutInflater, container, false)

        // Set up back arrow navigation
        setUpBackArrowNavigation()

        // Observe product data from the ViewModel
        observeProductData()

        // Set up List
        setUpRecyclerView()

        // Set up counter
        setUpCounter()


        return binding.root
    }

    // Function to set up back arrow navigation
    private fun setUpBackArrowNavigation() {
        // Set listener for back arrow icon
        binding.backArrow.setOnClickListener {
            // Pop back stack to ProductsScreenFragment
            findNavController().popBackStack(R.id.productsScreenFragment, false)
        }
    }

    // Function to set up product details in the UI
    private fun setUpProductDetail(product: Item?) {
        // Set product title text
        binding.productTitle.text = product?.name

        // Set product description text
        binding.productDesc.text = "${product?.description}"

        // Check if photos list is not empty and load the first image
        val imageUrl = "https://api.timbu.cloud/images/${product?.photos?.get(0)?.url}"
        if (imageUrl.isNotEmpty()) {
            // Display image from URL
            Glide.with(requireContext()).load(imageUrl).into(binding.productImage)
        } else {
            // Set a placeholder image or handle the case where there is no image
            binding.productImage.setImageResource(R.drawable.terrex_free_hiker)
        }

        // Get the category names of the current product
        val categoryNames = product?.categories?.map { it.name } ?: emptyList()
        // Notify the adapter to filter items based on the selected category name
        val selectedCategoryName = categoryNames.firstOrNull { category ->
            category in listOf("laptops", "monitors", "watches", "tablets", "headphones", "phones")
        }
        productDetailsAdapter.updateCategory(selectedCategoryName)

        binding.addToCart.setOnClickListener {
            if (product != null) {
                viewModel.addToCart(
                    CartItem(
                        cartItemId = 0, // Auto-generated by Room
                        productId = product.id ,
                        productImageUrl = product.photos[0].url,
                        productTitle = product.name ,
                        productQuantity = binding.qtyCount.text.toString().toInt(),
                        productPrice = "2" // Replace with actual product price
                    )
                )
            }
        }
    }

    // Function to observe product data from the ViewModel
    private fun observeProductData() {
        viewModel.timbuProduct.observe(viewLifecycleOwner) { timbuProduct ->
            when (timbuProduct) {
                is BaseResponse.Loading -> {
                    // Show loading toast
                    Toast.makeText(
                        requireContext(),
                        "Loading....",
                        Toast.LENGTH_SHORT
                    ).show()
                }

                is BaseResponse.Success -> {
                    // On success, set up product details
                    val product = timbuProduct.data
                    setUpProductDetail(product)
                }

                is BaseResponse.Error -> {
                    // On error, show error message
                    val errorMessage = timbuProduct.message
                    Toast.makeText(
                        requireContext(),
                        "${errorMessage}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        }
    }


    // Function to set up the RecyclerView with the ProductAdapter
    private fun setUpRecyclerView() {
        productDetailsAdapter = ProductsDetailsAdapter(viewModel)


        binding.productsRecyclerview.apply {
            layoutManager = GridLayoutManager(context, 2)
            adapter = productDetailsAdapter
        }

        // Observe items data from the ViewModel and submit to the adapter
        viewModel.items.observe(viewLifecycleOwner) { items ->
//            productAdapter.differ.submitList(items)
            // Submit the filtered list to the adapter
            productDetailsAdapter.submitList((items))
            // Initially submit the full list without filtering
//            productDetailsAdapter.submitList(items, null)
        }
    }

    private fun setUpCounter() {
        val plusBtn = binding.plusIv
        val minusBtn = binding.minusIv
        val countTv = binding.qtyCount
        var currentCount = countTv.text.toString().toInt()

        plusBtn.setOnClickListener {
            if (currentCount < 10) {
                currentCount += 1
                countTv.text = currentCount.toString()
            } else {
                Toast.makeText(
                    requireContext(),
                    "You cannot purchase more than 10 products as there are only 10 products currently available.",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }

        minusBtn.setOnClickListener {
            if (currentCount > 1) {
                currentCount -= 1
                countTv.text = currentCount.toString()
            }
            // Do nothing if currentCount is 1
        }
    }


}




